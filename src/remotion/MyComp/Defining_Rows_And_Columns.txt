Edit the follow remotion.js code and make it simpler. Make sure to not change the imports or the name of the section. The file is already created and you can edit it. Here is the code:

// AIWASHERE

import React from 'react';
import {
  spring,
  useCurrentFrame,
  useVideoConfig,
  AbsoluteFill,
  Sequence,
  interpolate,
} from 'remotion';

// Thorough description of the section:
// This Remotion component visually explains CSS Grid's `grid-template-columns` and `grid-template-rows` properties,
// along with the `fr` (fractional unit) and the `repeat()` function.
//
// The video starts with an engaging, animated title that fades in and then gracefully fades out
// as the main content area slides into view.
//
// The core content is divided into several distinct segments, each introduced with animated code snippets
// and immediately accompanied by a dynamic, sleek visual grid update:
//
// 1.  **`grid-template-columns: 1fr 1fr 1fr;`**:
//     - The CSS property "grid-template-columns:" is typed out.
//     - Followed by "1fr 1fr 1fr;" animating into place.
//     - A vibrant, illuminated grid visually divides into three equal columns.
//     - A clear, animated explanation of the `fr` (fractional unit) concept appears.
//
// 2.  **`grid-template-columns: 1fr 2fr 1fr;`**:
//     - The code snippet updates to "1fr 2fr 1fr;".
//     - The visual grid dynamically re-sizes, making the middle column twice as wide as its neighbors,
//       highlighting proportional space distribution.
//
// 3.  **`grid-template-rows: 1fr 1fr;`**:
//     - The focus shifts to rows. The "grid-template-rows:" property appears.
//     - "1fr 1fr;" animates in, and the grid instantly updates to show two equal rows,
//       while maintaining the prior column structure for visual context.
//
// 4.  **`Shorthand with repeat(): grid-template-columns: repeat(4, 1fr);`**:
//     - The concept of the `repeat()` function for shorthand grid definition is introduced.
//     - The code "repeat(4, 1fr);" animates into view.
//     - The grid dynamically reconfigures to display four equal columns, demonstrating the efficiency of `repeat()`.
//
// The entire presentation is designed to be fancy, colorful, sleek, modern, and easy to read.
// It uses a deep indigo-purple gradient background, bright code text, and emerald-accented grids.
// Animations leverage Remotion's `spring` and `interpolate` for fluid, natural movements.
// No external images or files are used; all styling is done via Tailwind CSS classes and inline styles.
// All imports are strictly from `remotion` or `react`, ensuring a self-contained and runnable experience.

export const Defining_Rows_And_Columns: React.FC = () => {
  const frame = useCurrentFrame();
  const { fps } = useVideoConfig();

  // --- Animation Timings (in frames) ---
  const segmentDuration = 100; // Duration each main content segment is fully visible
  const transitionDuration = 30; // Duration for elements to fade/slide in/out between segments

  const titleIn = 0;
  const titleOut = 90; // Title fades out as the first segment fades in

  // Segment 1: grid-template-columns: 1fr 1fr 1fr;
  const segment1_start = 90;
  const segment1_codeLine1_type = segment1_start + 0; // "grid-template-columns:" starts typing
  const segment1_codeLine2_type = segment1_start + 15; // "1fr 1fr 1fr;" starts typing
  const segment1_grid_change = segment1_start + 30; // Grid starts animating to new config
  const segment1_fr_explain_show = segment1_start + 50; // "fr explanation" appears

  // Segment 2: grid-template-columns: 1fr 2fr 1fr;
  const segment2_start = segment1_start + segmentDuration + transitionDuration;
  const segment2_codeLine1_type = segment2_start + 0;
  const segment2_codeLine2_type = segment2_start + 15;
  const segment2_grid_change = segment2_start + 30;

  // Segment 3: grid-template-rows: 1fr 1fr;
  const segment3_start = segment2_start + segmentDuration + transitionDuration;
  const segment3_codeLine1_type = segment3_start + 0;
  const segment3_codeLine2_type = segment3_start + 15;
  const segment3_grid_change = segment3_start + 30;

  // Segment 4: repeat(4, 1fr);
  const segment4_start = segment3_start + segmentDuration + transitionDuration;
  const segment4_codeLine1_type = segment4_start + 0;
  const segment4_codeLine2_type = segment4_start + 15;
  const segment4_grid_change = segment4_start + 30;

  const outro_start = segment4_start + segmentDuration + transitionDuration;
  const totalVideoDuration = outro_start + 60; // Buffer at the end for footer

  // --- Animated Code Component: Types out characters smoothly ---
  const AnimatedCodeLine = ({
    code,
    startFrame,
    delayPerChar = 1,
    fontSize = 'text-4xl',
    className = '',
  }: {
    code: string;
    startFrame: number;
    delayPerChar?: number;
    fontSize?: string;
    className?: string;
  }) => {
    const chars = code.split('');
    return (
      <div className={`font-mono text-blue-300 ${fontSize} ${className}`}>
        {chars.map((char, i) => {
          const charRevealProgress = spring({
            frame: frame - (startFrame + i * delayPerChar),
            fps,
            config: { damping: 200, stiffness: 100, mass: 0.5 },
          });
          const opacity = interpolate(charRevealProgress, [0, 1], [0, 1]);
          const translateY = interpolate(charRevealProgress, [0, 1], [10, 0]);
          return (
            <span
              key={i}
              style={{
                opacity,
                display: 'inline-block',
                transform: `translateY(${translateY}px)`,
              }}
            >
              {char}
            </span>
          );
        })}
      </div>
    );
  };

  // --- Grid Visualizer Component: Renders and animates the grid ---
  interface GridVisualizerProps {
    templateColumns: string;
    templateRows: string;
    startFrame: number; // When the grid *configuration* transition should begin
    width: number;
    height: number;
    showFrExplanation?: boolean;
    frExplanationFrame?: number;
  }

  const GridVisualizer: React.FC<GridVisualizerProps> = ({
    templateColumns,
    templateRows,
    startFrame,
    width,
    height,
    showFrExplanation = false,
    frExplanationFrame,
  }) => {
    // Spring for the overall grid container's scale and opacity
    const gridAppearanceProgress = spring({
      frame: frame - startFrame,
      fps,
      config: { damping: 200, stiffness: 100, mass: 0.5 },
    });

    // Parse grid templates to calculate positions and sizes
    const parseTemplate = (template: string, totalSize: number) => {
      const units = template.split(' ').filter(Boolean);
      const totalFr = units.reduce((acc, unit) => {
        if (unit.endsWith('fr')) {
          return acc + parseFloat(unit.slice(0, -2));
        }
        return acc; // For this demo, we primarily expect 'fr' units
      }, 0);

      let currentPos = 0;
      return units.map((unit) => {
        let size = 0;
        if (unit.endsWith('fr')) {
          size = (parseFloat(unit.slice(0, -2)) / totalFr) * totalSize;
        } else {
          // Fallback if not 'fr' (e.g., 'auto', 'px' - though not used in prompt examples)
          size = totalSize / units.length; // Distribute evenly
        }

        const start = currentPos;
        currentPos += size;
        return { unit: unit, size: size, start: start, end: currentPos };
      });
    };

    const colData = parseTemplate(templateColumns, width);
    const rowData = parseTemplate(templateRows, height);

    // Animation for the 'fr' explanation text
    const frOpacity = interpolate(
      frame,
      [frExplanationFrame || 0, (frExplanationFrame || 0) + 20],
      [0, 1],
      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
    );
    const frTranslateY = interpolate(frOpacity, [0, 1], [20, 0]);

    // Interpolate container properties based on grid appearance progress
    const containerScale = interpolate(gridAppearanceProgress, [0, 1], [0.8, 1]);
    const containerOpacity = interpolate(gridAppearanceProgress, [0, 1], [0, 1]);

    return (
      <div
        className="relative border-4 border-emerald-500 rounded-lg overflow-hidden shadow-2xl"
        style={{
          width: width,
          height: height,
          transform: `scale(${containerScale})`,
          opacity: containerOpacity,
          transformOrigin: 'center',
          backgroundColor: 'rgba(30, 30, 45, 0.8)', // Dark inner background
        }}
      >
        <svg
          className="absolute inset-0"
          width={width}
          height={height}
          viewBox={`0 0 ${width} ${height}`}
        >
          {/* Vertical lines (columns) */}
          {colData.slice(0, -1).map((col, i) => (
            <line
              key={`col-line-${i}`}
              x1={col.end}
              y1={0}
              x2={col.end}
              y2={height}
              stroke="rgba(255, 255, 255, 0.5)" // Brighter white lines
              strokeWidth="2"
            />
          ))}
          {/* Horizontal lines (rows) */}
          {rowData.slice(0, -1).map((row, i) => (
            <line
              key={`row-line-${i}`}
              x1={0}
              y1={row.end}
              x2={width}
              y2={row.end}
              stroke="rgba(255, 255, 255, 0.5)" // Brighter white lines
              strokeWidth="2"
            />
          ))}
        </svg>

        {showFrExplanation && (
          <div
            className="absolute -bottom-16 left-1/2 -translate-x-1/2 p-2 bg-yellow-600 text-white rounded-lg text-sm shadow-lg z-20"
            style={{ opacity: frOpacity, transform: `translateY(${frTranslateY}px)` }}
          >
            `fr` = Fractional Unit (Distributes remaining space proportionally)
          </div>
        )}

        {/* Column labels (e.g., 1fr, 2fr) */}
        {colData.map((col, i) => (
          <div
            key={`col-label-${i}`}
            className="absolute text-white text-lg font-bold"
            style={{
              left: col.start + col.size / 2,
              top: '50%',
              transform: 'translate(-50%, -50%)',
              opacity: containerOpacity,
              zIndex: 10,
            }}
          >
            {col.unit}
          </div>
        ))}
        {/* Row labels - only show if there are multiple rows to avoid clutter */}
        {rowData.length > 1 && rowData.map((row, i) => (
          <div
            key={`row-label-${i}`}
            className="absolute text-white text-lg font-bold"
            style={{
              left: '50%',
              top: row.start + row.size / 2,
              transform: 'translate(-50%, -50%)',
              opacity: containerOpacity,
              zIndex: 10,
            }}
          >
            {row.unit}
          </div>
        ))}
      </div>
    );
  };

  const gridWidth = 800;
  const gridHeight = 500;

  return (
    <AbsoluteFill className="bg-gradient-to-br from-indigo-900 to-purple-950 flex items-center justify-center relative">
      {/* Title sequence: Fades in and out */}
      <Sequence from={titleIn} durationInFrames={titleOut - titleIn}>
        <div
          className="text-white text-7xl font-extrabold"
          style={{
            opacity: interpolate(
              frame,
              [titleIn, titleIn + 30, titleOut - 30, titleOut],
              [0, 1, 1, 0],
              { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
            ),
            transform: `translateY(${interpolate(
              frame,
              [titleIn, titleIn + 30, titleOut - 30, titleOut],
              [-50, 0, 0, -50],
              { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
            )}px)`,
          }}
        >
          CSS Grid: Defining Rows & Columns
        </div>
      </Sequence>

      {/* Main Content Container: Centers all dynamic code and grid elements */}
      <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex flex-col items-center">
        {/* Segment 1: grid-template-columns: 1fr 1fr 1fr; */}
        <Sequence from={segment1_start} durationInFrames={segmentDuration + transitionDuration}>
          <div
            className="flex flex-col items-center"
            style={{
              opacity: interpolate(
                frame,
                [segment1_start, segment1_start + transitionDuration, segment1_start + segmentDuration, segment1_start + segmentDuration + transitionDuration],
                [0, 1, 1, 0],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              ),
              transform: `translateY(${interpolate(
                frame,
                [segment1_start, segment1_start + transitionDuration, segment1_start + segmentDuration, segment1_start + segmentDuration + transitionDuration],
                [50, 0, 0, -50],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              )}px)`,
            }}
          >
            <AnimatedCodeLine code="grid-template-columns:" startFrame={segment1_codeLine1_type} />
            <AnimatedCodeLine code="1fr 1fr 1fr;" startFrame={segment1_codeLine2_type} fontSize="text-5xl" className="mt-2" />
            <div className="mt-8">
              <GridVisualizer
                templateColumns="1fr 1fr 1fr"
                templateRows="1fr" // Default to 1 row when focusing on columns
                startFrame={segment1_grid_change}
                width={gridWidth}
                height={gridHeight}
                showFrExplanation={true}
                frExplanationFrame={segment1_fr_explain_show}
              />
            </div>
          </div>
        </Sequence>

        {/* Segment 2: grid-template-columns: 1fr 2fr 1fr; */}
        <Sequence from={segment2_start} durationInFrames={segmentDuration + transitionDuration}>
          <div
            className="flex flex-col items-center"
            style={{
              opacity: interpolate(
                frame,
                [segment2_start, segment2_start + transitionDuration, segment2_start + segmentDuration, segment2_start + segmentDuration + transitionDuration],
                [0, 1, 1, 0],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              ),
              transform: `translateY(${interpolate(
                frame,
                [segment2_start, segment2_start + transitionDuration, segment2_start + segmentDuration, segment2_start + segmentDuration + transitionDuration],
                [50, 0, 0, -50],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              )}px)`,
            }}
          >
            <AnimatedCodeLine code="grid-template-columns:" startFrame={segment2_codeLine1_type} />
            <AnimatedCodeLine code="1fr 2fr 1fr;" startFrame={segment2_codeLine2_type} fontSize="text-5xl" className="mt-2" />
            <div className="mt-8">
              <GridVisualizer
                templateColumns="1fr 2fr 1fr"
                templateRows="1fr"
                startFrame={segment2_grid_change}
                width={gridWidth}
                height={gridHeight}
              />
            </div>
          </div>
        </Sequence>

        {/* Segment 3: grid-template-rows: 1fr 1fr; */}
        <Sequence from={segment3_start} durationInFrames={segmentDuration + transitionDuration}>
          <div
            className="flex flex-col items-center"
            style={{
              opacity: interpolate(
                frame,
                [segment3_start, segment3_start + transitionDuration, segment3_start + segmentDuration, segment3_start + segmentDuration + transitionDuration],
                [0, 1, 1, 0],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              ),
              transform: `translateY(${interpolate(
                frame,
                [segment3_start, segment3_start + transitionDuration, segment3_start + segmentDuration, segment3_start + segmentDuration + transitionDuration],
                [50, 0, 0, -50],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              )}px)`,
            }}
          >
            <AnimatedCodeLine code="grid-template-rows:" startFrame={segment3_codeLine1_type} />
            <AnimatedCodeLine code="1fr 1fr;" startFrame={segment3_codeLine2_type} fontSize="text-5xl" className="mt-2" />
            <div className="mt-8">
              <GridVisualizer
                templateColumns="1fr 1fr 1fr" // Keep columns for visual context while demonstrating rows
                templateRows="1fr 1fr"
                startFrame={segment3_grid_change}
                width={gridWidth}
                height={gridHeight}
              />
            </div>
          </div>
        </Sequence>

        {/* Segment 4: repeat(4, 1fr); */}
        <Sequence from={segment4_start} durationInFrames={segmentDuration + transitionDuration}>
          <div
            className="flex flex-col items-center"
            style={{
              opacity: interpolate(
                frame,
                [segment4_start, segment4_start + transitionDuration, segment4_start + segmentDuration, segment4_start + segmentDuration + transitionDuration],
                [0, 1, 1, 0],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              ),
              transform: `translateY(${interpolate(
                frame,
                [segment4_start, segment4_start + transitionDuration, segment4_start + segmentDuration, segment4_start + segmentDuration + transitionDuration],
                [50, 0, 0, -50],
                { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
              )}px)`,
            }}
          >
            <AnimatedCodeLine code="Shorthand with repeat():" startFrame={segment4_codeLine1_type} />
            <AnimatedCodeLine code="grid-template-columns: repeat(4, 1fr);" startFrame={segment4_codeLine2_type} fontSize="text-5xl" className="mt-2" />
            <div className="mt-8">
              <GridVisualizer
                templateColumns="1fr 1fr 1fr 1fr" // Render 4 equal columns using repeat concept
                templateRows="1fr"
                startFrame={segment4_grid_change}
                width={gridWidth}
                height={gridHeight}
              />
            </div>
          </div>
        </Sequence>
      </div>

      {/* Footer: Appears at the very end */}
      <Sequence from={totalVideoDuration - 60} durationInFrames={60}>
        <div
          className="absolute bottom-10 text-white text-4xl font-semibold"
          style={{
            opacity: interpolate(
              frame,
              [totalVideoDuration - 60, totalVideoDuration - 30],
              [0, 1],
              { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' }
            ),
          }}
        >
          Mastering Grid Layouts!
        </div>
      </Sequence>
    </AbsoluteFill>
  );
};

export const Defining_Rows_And_Columns_Duration = 600; // Total duration in frames (20 seconds at 30fps)
export const Defining_Rows_And_Columns_Edited = true; // Confirmed, this section is fully edited and implemented
